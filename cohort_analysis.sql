---Cohort Analysis

WITH FirstPurchase AS (
    -- Step 1: Get the first purchase month for each customer
    SELECT 
        c.Custid,
        MIN(CAST(o.Bill_date_timestamp AS DATE)) AS FirstPurchaseDate,
        YEAR(MIN(CAST(o.Bill_date_timestamp AS DATE))) AS FirstPurchaseYear,
        MONTH(MIN(CAST(o.Bill_date_timestamp AS DATE))) AS FirstPurchaseMonth
    FROM CUSTOMER360 c
    JOIN orders360 o ON c.Custid = o.Customer_id
    GROUP BY c.Custid
),
CohortAnalysis AS (
    -- Step 2: Calculate months since first purchase and cohort activity
    SELECT
        c.Custid,
        fp.FirstPurchaseYear,
        fp.FirstPurchaseMonth,
        DATEDIFF(MONTH, fp.FirstPurchaseDate, o.Bill_date_timestamp) + 1 AS MonthsSinceFirstPurchase,
        COUNT(o.Bill_date_timestamp) AS TotalOrders
    FROM CUSTOMER360 c
    JOIN orders360 o ON c.Custid = o.Customer_id
    JOIN FirstPurchase fp ON c.Custid = fp.Custid
    WHERE o.Bill_date_timestamp >= fp.FirstPurchaseDate
    GROUP BY c.Custid, fp.FirstPurchaseYear, fp.FirstPurchaseMonth, DATEDIFF(MONTH, fp.FirstPurchaseDate, o.Bill_date_timestamp)
)
-- Step 3: Pivot the data to show cohort activity across months (Month 1 to Month 12)
SELECT 
    CONCAT(fp.FirstPurchaseYear, '-', FORMAT(fp.FirstPurchaseMonth, '00')) AS CohortStart,
    ISNULL(SUM(CASE WHEN MonthsSinceFirstPurchase = 1 THEN TotalOrders END), 0) AS Month1,
    ISNULL(SUM(CASE WHEN MonthsSinceFirstPurchase = 2 THEN TotalOrders END), 0) AS Month2,
    ISNULL(SUM(CASE WHEN MonthsSinceFirstPurchase = 3 THEN TotalOrders END), 0) AS Month3,
    ISNULL(SUM(CASE WHEN MonthsSinceFirstPurchase = 4 THEN TotalOrders END), 0) AS Month4,
    ISNULL(SUM(CASE WHEN MonthsSinceFirstPurchase = 5 THEN TotalOrders END), 0) AS Month5,
    ISNULL(SUM(CASE WHEN MonthsSinceFirstPurchase = 6 THEN TotalOrders END), 0) AS Month6,
    ISNULL(SUM(CASE WHEN MonthsSinceFirstPurchase = 7 THEN TotalOrders END), 0) AS Month7,
    ISNULL(SUM(CASE WHEN MonthsSinceFirstPurchase = 8 THEN TotalOrders END), 0) AS Month8,
    ISNULL(SUM(CASE WHEN MonthsSinceFirstPurchase = 9 THEN TotalOrders END), 0) AS Month9,
    ISNULL(SUM(CASE WHEN MonthsSinceFirstPurchase = 10 THEN TotalOrders END), 0) AS Month10,
    ISNULL(SUM(CASE WHEN MonthsSinceFirstPurchase = 11 THEN TotalOrders END), 0) AS Month11,
    ISNULL(SUM(CASE WHEN MonthsSinceFirstPurchase = 12 THEN TotalOrders END), 0) AS Month12
FROM CohortAnalysis fp
GROUP BY fp.FirstPurchaseYear, fp.FirstPurchaseMonth
ORDER BY fp.FirstPurchaseYear, fp.FirstPurchaseMonth;


--------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------
--Cohort Analysis with Retention Rate Calculation and Revenue Metrics
WITH cohort_data AS (
    -- Determine the cohort month for each customer based on their first purchase
    SELECT c.custid AS customer_id,
        FORMAT(MIN(o.bill_date_timestamp), 'yyyy-MM') AS cohort_month
    FROM orders360 o
    JOIN customer360 c ON o.customer_id = c.custid
    GROUP BY c.custid
),
repeat_customers AS (
    -- Identify repeat customers who made purchases after their cohort month
    SELECT cohort.cohort_month,ca.custid,
        FORMAT(o.bill_date_timestamp, 'yyyy-MM') AS order_month,
        DATEDIFF(MONTH, TRY_CAST(cohort.cohort_month + '-01' AS DATE), TRY_CAST(FORMAT(o.bill_date_timestamp, 'yyyy-MM') + '-01' AS DATE)) AS months_to_repeat
    FROM cohort_data cohort
    JOIN orders o ON cohort.customer_id = o.customer_id
    JOIN customer360 ca ON ca.custid = cohort.customer_id
    WHERE FORMAT(o.bill_date_timestamp, 'yyyy-MM') > cohort.cohort_month
)
SELECT
    cohort.cohort_month,
   -- Count of distinct customers in the cohort month
    COUNT(DISTINCT cohort.customer_id) AS cohort_customers,
   -- Count of distinct repeat customers
    COUNT(DISTINCT repeat.custid) AS repeat_customers,
   -- Retention rate calculation
    CASE 
        WHEN COUNT(DISTINCT cohort.customer_id) > 0 
        THEN ROUND(CAST(COUNT(DISTINCT repeat.custid) AS DECIMAL) / COUNT(DISTINCT cohort.customer_id) * 100,3)
        ELSE 0
    END AS retention_rate,
    -- Average months to repeat for repeat customers, using COALESCE to avoid NULLs
    COALESCE(AVG(repeat.months_to_repeat), 0) AS avg_months_to_repeat,
    -- Total orders made by cohort customers
    SUM(CASE WHEN cohort.customer_id IS NOT NULL THEN 1 ELSE 0 END) AS total_orders_cohort_customers,    
    -- Total revenue generated by cohort customers
    ROUND(SUM(CASE WHEN cohort.customer_id IS NOT NULL THEN o.Total_Amount ELSE 0 END), 2) AS total_revenue_cohort_customers,
    
    -- Total orders made by repeat customers
    SUM(CASE WHEN repeat.custid IS NOT NULL THEN 1 ELSE 0 END) AS total_orders_repeat_customers,
    
    -- Total revenue generated by repeat customers
    ROUND(SUM(CASE WHEN repeat.custid IS NOT NULL THEN o.Total_Amount ELSE 0 END), 2) AS total_revenue_repeat_customers

FROM cohort_data cohort
LEFT JOIN repeat_customers repeat ON cohort.customer_id = repeat.custid
LEFT JOIN orders360 o ON cohort.customer_id = o.customer_id
GROUP BY cohort.cohort_month
ORDER BY cohort.cohort_month



-------------------------------RFM SEGEMNTATION--------------------------------------------------------------------------

-- Step 1: Calculate RFM Metrics and Assign Scores
WITH RFM_Scores AS (
    SELECT 
        custid,
        -- Recency: Days since the last transaction
        DATEDIFF(DAY, Last_Transaction_Date, (SELECT MAX(Last_Transaction_Date) FROM customer360)) AS Recency,
        -- Frequency: Months between first and last purchase 
        DATEDIFF(MONTH, First_Transaction_Date, Last_Transaction_Date) + 1 AS Frequency,
        -- Monetary
        monetary,
        -- Assign Recency Score (1 = least recent, 5 = most recent)
        NTILE(5) OVER (ORDER BY DATEDIFF(DAY, Last_Transaction_Date, GETDATE()) ASC) AS RecencyScore,
        -- Assign Frequency Score (1 = least frequent, 5 = most frequent)
        NTILE(5) OVER (ORDER BY DATEDIFF(MONTH, First_Transaction_Date, Last_Transaction_Date) DESC) AS FrequencyScore,
        -- Assign Monetary Score (1 = lowest spender, 5 = highest spender)
        NTILE(5) OVER (ORDER BY monetary DESC) AS MonetaryScore
    FROM customer360
),
-- Step 2: Combine Scores to Create RFM Segments
CombinedScores AS (
    SELECT 
        custid,
        RecencyScore,
        FrequencyScore,
        MonetaryScore,
        -- Combine scores into a single RFM score
        CAST(RecencyScore AS VARCHAR) + CAST(FrequencyScore AS VARCHAR) + CAST(MonetaryScore AS VARCHAR) AS RFMScore
    FROM RFM_Scores
)
-- Step 3: Categorize RFM Scores into Segments
SELECT 
    custid,
    RecencyScore,
    FrequencyScore,
    MonetaryScore,
    RFMScore,
    CASE 
        WHEN RecencyScore >= 4 AND FrequencyScore >= 4 AND MonetaryScore >= 4 THEN 'Premium'
        WHEN RecencyScore >= 3 AND FrequencyScore >= 3 AND MonetaryScore >= 3 THEN 'Gold'
        WHEN RecencyScore >= 2 AND FrequencyScore >= 2 AND MonetaryScore >= 2 THEN 'Silver'
        ELSE 'Standard'
    END AS Segment --INTO RFM
FROM CombinedScores
ORDER BY Segment DESC, RFMScore DESC;
------------------------------------------------------------

SELECT * FROM RFM
select *  from customer360

----------------------------------------------------------------------------------
-- Join RFM table with customer360 and group customers by segment
SELECT r.Segment,COUNT(r.custid) AS CustomerCount
FROM customer360 c
JOIN RFM r ON c.custid = r.custid
GROUP BY r.Segment
ORDER BY r.Segment DESC, CustomerCount DESC;

--Sales Segmentation Analysis by Customer Segment
SELECT r.Segment,ROUND(SUM(c.monetary), 2) AS TotalSales,
ROUND(SUM(c.monetary) * 100.0 / SUM(SUM(c.monetary)) OVER (), 2) AS PercentageOfSales
FROM customer360 c
JOIN RFM r ON c.custid = r.custid
GROUP BY r.Segment
ORDER BY TotalSales DESC;





